// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  image       String   @default("/images/avt/1.jpg")
  email       String?  @unique
  name        String?
  password    String
  token       String?
  salt        String
  role        UserRole @default(USER)
  chipsAmount Int      @default(30000)

  tables        Table[]
  players       Player[]
  banks         Bank[]
  loseHistories LoseHistory[]
  winMessages   WinMessages[]
  recharges     Recharge[]
  withdraws     Withdraw[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Table {
  id      String  @id @default(cuid())
  name    String
  eventId String? @map(name: "event_id")
  event   Event?  @relation(fields: [eventId], references: [id])

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  players  Player[]
  messages Message[]
  matches  Match[]

  maxPlayers Int @default(10) @map(name: "max_players")
  minPlayers Int @default(2) @map(name: "min_players")

  minBuyIn Int @map(name: "min_buy_in")
  maxBuyIn Int @map(name: "max_buy_in")

  possibleVictoryConditions String? @map(name: "possible_victory_conditions")

  handOver Boolean @default(true) @map(name: "hand_over")

  decks Deck[]

  deleted Boolean @default(false) @map(name: "on_deleted")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([userId])
  @@map(name: "tables")
}

model WinMessages {
  id String @id @default(cuid())

  matchId String @map(name: "match_id")
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content  String
  handName String @map(name: "hand_name")
  amount   Int

  bestHand   Card[] @relation("BestHandCards")
  winnerHand Card[] @relation("WinnerHandCards")

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "winner_messages")
}

model LoseHistory {
  id String @id @default(cuid())

  matchId String @map(name: "match_id")
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  handName String @map(name: "hand_name")
  amount   Int

  worstHand Card[] @relation("WorstHandCards")
  loserHand Card[] @relation("LoserHandCards")

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "lose_histories")
}

enum CardRank {
  A
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  J
  Q
  K
}

enum CardSuit {
  HEARTS
  DIAMONDS
  CLUBS
  SPADES
}

model Card {
  id   String   @id @default(cuid())
  rank CardRank
  suit CardSuit

  decks   Deck[]
  matches Match[]

  bestHands  WinMessages[] @relation("BestHandCards")
  winnerHand WinMessages[] @relation("WinnerHandCards")

  worstHands LoseHistory[] @relation("WorstHandCards")
  loserHand  LoseHistory[] @relation("LoserHandCards")

  participantOne Participant[] @relation("CardOne")
  participantTwo Participant[] @relation("CardTwo")

  @@map(name: "cards")
}

model Player {
  id String @id @default(cuid())

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  socketId String? @map(name: "socket_id")
  buyIn    Int     @default(0) @map(name: "buy_in")
  stack    Int     @default(0)

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)

  isTurn         Boolean @default(false) @map(name: "is_turn")
  leaveNextMatch Boolean @default(false) @map(name: "leave_next_match")

  messages     Message[]
  participants Participant[]

  smallBlindMatch Match[] @relation("SmallBlindPlayer")
  bigBlindMatch   Match[] @relation("BigBlindPlayer")
  buttonMatch     Match[] @relation("ButtonPlayer")

  winners Match[] @relation("MatchWinner")

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([userId])
  @@index([tableId])
  @@map(name: "players")
}

model Message {
  id String @id @default(cuid())

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)

  content  String
  playerId String  @map(name: "player_id")
  player   Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  deleted  Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([playerId])
  @@index([tableId])
  @@map(name: "messages")
}

model Event {
  id   String @id @default(cuid())
  name String

  prize  Int
  min    Int
  max    Int
  status String

  tables Table[]

  start DateTime @default(now())
  end   DateTime @default(now())

  @@map(name: "events")
}

model Bank {
  id String @id @default(cuid())

  name       String
  user_id    String   @map(name: "user_id")
  user       User     @relation(fields: [user_id], references: [id])
  branch     String
  number1    String
  number2    String
  username   String
  password   String
  status     String
  bankcode   String
  linkqrcode String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "banks")
}

model Recharge {
  id String @id @default(cuid())

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  amount    Int
  number1   String
  number2   String
  branch    String
  status    String
  deletedAt DateTime? @map(name: "deleted_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "recharges")
}

model Withdraw {
  id String @id @default(cuid())

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  cardName  String    @map(name: "card_name")
  cardCode  String    @map(name: "card_code")
  amount    Int
  comment   String
  token     String
  isBank    Boolean   @default(false) @map(name: "is_bank")
  status    String
  deletedAt DateTime? @map(name: "deleted_at")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "withdraws")
}

model Deck {
  id String @id @default(cuid())

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id])

  cards   Card[]
  matches Match[]

  @@map(name: "deck")
}

model Match {
  id            String    @id @default(cuid())
  tableId       String    @map(name: "table_id")
  table         Table     @relation(fields: [tableId], references: [id])
  startTime     DateTime? @map(name: "start_time")
  endTime       DateTime? @map(name: "end_time")
  numberPlayers Int       @map(name: "number_players")
  deckId        String    @map(name: "deck_id")
  deck          Deck      @relation(fields: [deckId], references: [id])
  board         Card[]

  pot        Int    @default(0)
  mainPot    Int    @default(0) @map(name: "main_pot")
  sidePot    String @default("[]") @map(name: "side_pot")
  callAmount Int    @default(0) @map(name: "call_amount")

  minBet   Int @default(0) @map(name: "min_bet")
  minRaise Int @default(0) @map(name: "min_raise")

  isPreFlop  Boolean @default(true) @map(name: "is_pre_flop")
  isFlop     Boolean @default(false) @map(name: "is_flop")
  isTurn     Boolean @default(false) @map(name: "is_turn")
  isRiver    Boolean @default(false) @map(name: "is_river")
  isShowdown Boolean @default(false) @map(name: "is_showdown")

  winnerId String?
  winner   Player? @relation("MatchWinner", fields: [winnerId], references: [id])

  buttonId String? @map(name: "button_id")
  button   Player? @relation("ButtonPlayer", fields: [buttonId], references: [id])

  smallBlindId String? @map(name: "small_blind_id")
  smallBlind   Player? @relation("SmallBlindPlayer", fields: [smallBlindId], references: [id])

  bigBlindId String? @map(name: "big_blind_id")
  bigBlind   Player? @relation("BigBlindPlayer", fields: [bigBlindId], references: [id])

  participants  Participant[]
  sidePots      SidePot[]
  winMessages   WinMessages[]
  loseHistories LoseHistory[]

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "match")
}

model Participant {
  id       String @id @default(cuid())
  matchId  String @map(name: "match_id")
  match    Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  playerId String @map(name: "player_id")
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  cardOneId String? @map(name: "card_one_id")
  cardOne   Card?   @relation("CardOne", fields: [cardOneId], references: [id])
  cardTwoId String? @map(name: "card_two_id")
  cardTwo   Card?   @relation("CardTwo", fields: [cardTwoId], references: [id])

  bet       Int     @default(0)
  isChecked Boolean @default(false) @map(name: "is_checked")
  isFolded  Boolean @default(true) @map(name: "is_folded")
  isAllIn   Boolean @default(false) @map(name: "is_all_in")

  lastAction String @default("") @map(name: "last_action")

  sidePotId String?  @map(name: "side_pot_id")
  sidePot   SidePot? @relation(fields: [sidePotId], references: [id])

  @@unique([playerId, matchId])
  @@map(name: "participant")
}

model SidePot {
  id String @id @default(cuid())

  matchId String @map(name: "match_id")
  match   Match  @relation(fields: [matchId], references: [id])

  amount Int @default(0)

  participants Participant[]

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@map(name: "side_pots")
}
