// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String?  @unique
  name        String?
  password    String
  token       String?
  salt        String
  role        UserRole @default(USER)
  chipsAmount Int      @default(30000)

  tables    Table[]
  players   Player[]
  banks     Bank[]
  recharges Recharge[]
  withdraws Withdraw[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Table {
  id      String  @id @default(cuid())
  name    String
  eventId String? @map(name: "event_id")
  event   Event?  @relation(fields: [eventId], references: [id])

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  players  Player[]
  messages Message[]

  limit          Int
  maxPlayers     Int     @default(10) @map(name: "max_players")
  seats          Int     @default(10)
  smallBlind     Int?    @map(name: "small_blind")
  bigBlind       Int?    @map(name: "big_blind")
  pot            Int     @default(0)
  mainPot        Int     @default(0) @map(name: "main_pot")
  callAmount     Int     @default(0) @map(name: "call_amount")
  wentToShowdown Boolean @default(false) @map(name: "went_to_showdown")
  minBet         Int?    @map(name: "min_bet")
  minRaise       Int?    @map(name: "min_raise")
  deck           Card[]  @relation("TableDeck")
  board          Card[]  @relation("TableBoard")
  sidePots       String  @default("[]") @map(name: "side_pots")
  buttonId       String? @map(name: "button_id")
  turn           Boolean @default(false)

  histories History[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([userId])
  @@map(name: "tables")
}

enum CardRank {
  A
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  J
  Q
  K
}

enum CardSuit {
  HEARTS
  DIAMONDS
  CLUBS
  SPADES
}

model Card {
  id   String   @id @default(cuid())
  rank CardRank
  suit CardSuit

  tableDeck   Table?  @relation("TableDeck", fields: [tableDeckId], references: [id])
  tableDeckId String?

  tableBoard   Table?  @relation("TableBoard", fields: [tableBoardId], references: [id])
  tableBoardId String?

  @@map(name: "cards")
}

model History {
  id String @id @default(cuid())

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id])

  content String
  deleted Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([tableId])
  @@map(name: "histories")
}

model Player {
  id String @id @default(cuid())

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  socketId String? @map(name: "socket_id")
  bankroll Int?

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id])

  messages Message[]

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([userId])
  @@index([tableId])
  @@map(name: "players")
}

model Message {
  id String @id @default(cuid())

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id])

  content  String
  playerId String  @map(name: "player_id")
  player   Player  @relation(fields: [playerId], references: [id])
  deleted  Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([playerId])
  @@index([tableId])
  @@map(name: "messages")
}

model Event {
  id   String @id @default(cuid())
  name String

  prize  Int
  min    Int
  max    Int
  status String

  tables Table[]

  start DateTime @default(now())
  end   DateTime @default(now())

  @@map(name: "events")
}

model Bank {
  id String @id @default(cuid())

  name       String
  user_id    String   @map(name: "user_id")
  user       User     @relation(fields: [user_id], references: [id])
  branch     String
  number1    String
  number2    String
  username   String
  password   String
  status     String
  bankcode   String
  linkqrcode String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "banks")
}

model Recharge {
  id            String @id @default(cuid())
  tranId        String @unique @map(name: "tran_id")
  numberTranId  String @unique @map(name: "number_tran_id")
  tranHistoryId String @unique @map(name: "tran_history_id")

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  amount    Int
  desc      String
  type      String
  number1   String
  number2   String
  branch    String
  bankCode  String    @map(name: "bank_code")
  name      String
  status    String
  deletedAt DateTime? @map(name: "deleted_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "recharges")
}

model Withdraw {
  id String @id @default(cuid())

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  bankCode  String    @map(name: "bank_code")
  cardName  String    @map(name: "card_name")
  cardCode  String    @map(name: "card_code")
  amount    Int
  comment   String
  token     String
  tranId    String    @unique @map(name: "tran_id")
  isBank    Boolean   @default(false) @map(name: "is_bank")
  status    String
  deletedAt DateTime? @map(name: "deleted_at")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "withdraws")
}
