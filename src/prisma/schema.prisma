// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String?  @unique
  name        String?
  password    String
  token       String?
  salt        String
  role        UserRole @default(USER)
  chipsAmount Int      @default(30000)

  tables    Table[]
  players   Player[]
  banks     Bank[]
  recharges Recharge[]
  withdraws Withdraw[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Table {
  id      String  @id @default(cuid())
  name    String
  eventId String? @map(name: "event_id")
  event   Event?  @relation(fields: [eventId], references: [id])

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  players  Player[]
  messages Message[]
  matches  Match[]

  maxPlayers                Int     @default(10) @map(name: "max_players")
  minPlayers                Int     @default(2) @map(name: "min_players")
  minBuyIn                  Int     @map(name: "min_buy_in")
  maxBuyIn                  Int     @map(name: "max_buy_in")
  possibleVictoryConditions String? @map(name: "possible_victory_conditions")

  decks TableDeck[]
  units TableUnit[]

  histories History[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([userId])
  @@map(name: "tables")
}

enum CardRank {
  A
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  J
  Q
  K
}

enum CardSuit {
  HEARTS
  DIAMONDS
  CLUBS
  SPADES
}

model Card {
  id   String   @id @default(cuid())
  rank CardRank
  suit CardSuit

  deckId String? @map(name: "deck_id")
  deck   Deck?   @relation(fields: [deckId], references: [id])

  actions Action[]

  @@map(name: "cards")
}

model History {
  id String @id @default(cuid())

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id])

  content String
  deleted Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([tableId])
  @@map(name: "histories")
}

model Player {
  id String @id @default(cuid())

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  socketId String? @map(name: "socket_id")
  bankroll Int?

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)

  messages     Message[]
  participants Participant[]

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([userId])
  @@index([tableId])
  @@map(name: "players")
}

model Message {
  id String @id @default(cuid())

  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)

  content  String
  playerId String  @map(name: "player_id")
  player   Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  deleted  Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([playerId])
  @@index([tableId])
  @@map(name: "messages")
}

model Event {
  id   String @id @default(cuid())
  name String

  prize  Int
  min    Int
  max    Int
  status String

  tables Table[]

  start DateTime @default(now())
  end   DateTime @default(now())

  @@map(name: "events")
}

model Bank {
  id String @id @default(cuid())

  name       String
  user_id    String   @map(name: "user_id")
  user       User     @relation(fields: [user_id], references: [id])
  branch     String
  number1    String
  number2    String
  username   String
  password   String
  status     String
  bankcode   String
  linkqrcode String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "banks")
}

model Recharge {
  id String @id @default(cuid())

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  amount    Int
  number1   String
  number2   String
  branch    String
  status    String
  deletedAt DateTime? @map(name: "deleted_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "recharges")
}

model Withdraw {
  id String @id @default(cuid())

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  cardName  String    @map(name: "card_name")
  cardCode  String    @map(name: "card_code")
  amount    Int
  comment   String
  token     String
  isBank    Boolean   @default(false) @map(name: "is_bank")
  status    String
  deletedAt DateTime? @map(name: "deleted_at")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "withdraws")
}

// Action table
model Action {
  id             String       @id @default(cuid())
  dealId         String       @map(name: "deal_id")
  deal           Deal         @relation(fields: [dealId], references: [id])
  cardId         String?      @map(name: "card_id")
  card           Card?        @relation(fields: [cardId], references: [id])
  participantId  String?      @map(name: "participant_id")
  participant    Participant? @relation(fields: [participantId], references: [id])
  actionTypeId   String       @map(name: "action_type_id")
  actionType     ActionType   @relation(fields: [actionTypeId], references: [id])
  actionOrder    Int          @map(name: "action_order")
  actionNotation String?      @map(name: "action_notation")

  @@unique([dealId, actionOrder])
  @@map(name: "action")
}

// ActionType table
model ActionType {
  id   String @id @default(cuid())
  name String

  actions Action[]

  @@map(name: "action_type")
}

// CardInDeck table

// Deal table
model Deal {
  id      String @id @default(cuid())
  matchId String @map(name: "match_id")
  match   Match  @relation(fields: [matchId], references: [id])

  dealOrders DealOrder[]
  actions    Action[]

  startTime     DateTime  @map(name: "start_time")
  endTime       DateTime? @map(name: "end_time")
  moveTimeLimit String?   @map(name: "move_time_limit")
  dealResult    String?   @map(name: "deal_result")

  @@unique([matchId])
  @@map(name: "deal")
}

// DealOrder table
model DealOrder {
  id            String      @id @default(cuid())
  participantId String      @map(name: "participant_id")
  participant   Participant @relation(fields: [participantId], references: [id])
  dealId        String      @map(name: "deal_id")
  deal          Deal        @relation(fields: [dealId], references: [id])
  playerOrder   String
  dealResult    String?     @map(name: "deal_result")
  score         Float?

  @@unique([participantId, dealId])
  @@unique([dealId, playerOrder])
  @@map(name: "deal_order")
}

// Deck table
model Deck {
  id   String @id @default(cuid())
  name String

  tableDecks TableDeck[]
  cards      Card[]
  matches    Match[]

  @@map(name: "deck")
}

// TableDeck table
model TableDeck {
  id      String @id @default(cuid())
  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id])
  deckId  String @map(name: "deck_id")
  deck    Deck   @relation(fields: [deckId], references: [id])

  @@unique([tableId, deckId])
  @@map(name: "table_deck")
}

// TableUnit table
model TableUnit {
  id      String @id @default(cuid())
  tableId String @map(name: "table_id")
  table   Table  @relation(fields: [tableId], references: [id])
  unitId  String @map(name: "unit_id")
  unit    Unit   @relation(fields: [unitId], references: [id])

  @@unique([tableId, unitId])
  @@map(name: "table_unit")
}

// Match table
model Match {
  id                String    @id @default(cuid())
  tableId           String    @map(name: "table_id")
  table             Table     @relation(fields: [tableId], references: [id])
  startTime         DateTime  @map(name: "start_time")
  endTime           DateTime? @map(name: "end_time")
  numberPlayers     Int       @map(name: "number_players")
  deckId            String    @map(name: "deck_id")
  deck              Deck      @relation(fields: [deckId], references: [id])
  decksUsed         Int       @default(1) @map(name: "decks_used")
  unitId            String    @map(name: "unit_id")
  unit              Unit      @relation(fields: [unitId], references: [id])
  deals             Deal[]
  entranceFee       Float?    @map(name: "entrance_fee")
  victoryConditions String    @map(name: "victory_conditions")
  matchResult       String?   @map(name: "match_result")

  participants Participant[]

  @@map(name: "match")
}

// Participant table
model Participant {
  id                 String @id @default(cuid())
  matchId            String @map(name: "match_id")
  match              Match  @relation(fields: [matchId], references: [id])
  playerId           String @map(name: "player_id")
  player             Player @relation(fields: [playerId], references: [id])
  initialPlayerOrder Int    @default(0) @map(name: "initial_player_order")
  score              Float?

  dealOrders DealOrder[]
  actions    Action[]

  @@unique([playerId, matchId])
  @@unique([matchId, initialPlayerOrder])
  @@map(name: "participant")
}

// Unit table
model Unit {
  id   String @id @default(cuid())
  name String

  tables  TableUnit[]
  matches Match[]

  @@map(name: "unit")
}
